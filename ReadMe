Readme
Firstly, for the model part, we creat a Pixel interface to show all operations that should work for each pixel in an image.
Accordingly, we create a RGBPixel class to implement these operations,
which means the RGBPixel class shows what the every pixel can be changed when we focus on one pixel.
Also, we creat a class called GreyscalePixel to extend RGBPixel
since we need to have a way to make the pixel brighten when we want to make the pixel to red, blue, green, value components and so on.

After finishing to change each pixel, we move to work on whole image.

We create an Image interface which gives all operations for a processable image.
Then, we create a class called BasePPMImage class for an image which is processable and can be converted to ASCII PPM.
Also, we create a class called GreyscaleImage to extend BasePPMImage
since we need to have a way to Instantiate the Image to grey when we what to make the image to red, green, blue, value components.

Then, we create an ImageProcessingModel interface.
This interface represent all operations what an image processor model should do.
According to this interface, we implement a class called BasePPMImageProcessingModel to implement the operations
and state of an image processor when we want to process a set of PPM images.

Secondly, for the controller part, we create an interface called ImageProcessingController
that represents operations that should be offered by a controller for the image processor.
 then, for the class TextScriptedImageProcessingController which implements this interface,
 it use some operations to control the image processor operating through text commands.

Thirdly, for view part, the ImageProcessingView interface shows the operations of an image processing view.
Class TextScriptImageProcessingView that implements this interface to allow the messages transmit to the user via an Appendable.